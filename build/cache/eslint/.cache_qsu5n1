[{"C:\\Users\\win10\\Github\\G2Layer_Gen\\pages\\api\\hello.js":"1","C:\\Users\\win10\\Github\\G2Layer_Gen\\pages\\api\\properties.js":"2","C:\\Users\\win10\\Github\\G2Layer_Gen\\pages\\contact.js":"3","C:\\Users\\win10\\Github\\G2Layer_Gen\\pages\\[streamerid]\\campaigns.js":"4","C:\\Users\\win10\\Github\\G2Layer_Gen\\pages\\[streamerid]\\triggers.js":"5","C:\\Users\\win10\\Github\\G2Layer_Gen\\pages\\[streamerid]\\[overlayid].js":"6","C:\\Users\\win10\\Github\\G2Layer_Gen\\pages\\_app.js":"7"},{"size":181,"mtime":1675951034596,"results":"8","hashOfConfig":"9"},{"size":383,"mtime":1675951034596,"results":"10","hashOfConfig":"9"},{"size":2367,"mtime":1675951034596,"results":"11","hashOfConfig":"9"},{"size":20874,"mtime":1675963376584,"results":"12","hashOfConfig":"9"},{"size":3373,"mtime":1675951034596,"results":"13","hashOfConfig":"9"},{"size":17505,"mtime":1675963422070,"results":"14","hashOfConfig":"9"},{"size":144,"mtime":1675951034596,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"112ip88",{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\win10\\Github\\G2Layer_Gen\\pages\\api\\hello.js",[],[],"C:\\Users\\win10\\Github\\G2Layer_Gen\\pages\\api\\properties.js",[],[],"C:\\Users\\win10\\Github\\G2Layer_Gen\\pages\\contact.js",[],[],"C:\\Users\\win10\\Github\\G2Layer_Gen\\pages\\[streamerid]\\campaigns.js",["40","41"],[],"import Head from 'next/head'\r\nimport { connectToDatabase } from '../../util/mongodb'\r\nimport styled from 'styled-components'\r\nimport { useState, useEffect } from 'react'\r\nimport socketIOClient from 'socket.io-client';\r\n\r\nconst socket = socketIOClient('http://localhost:3002');\r\n\r\nexport default function Home({initial_properties, initial_display_final, initial_campaigns_to_show, initial_campaigns_saved, streamerid}) {\r\n\r\n    const [count, setCount] = useState(0);\r\n    const [endtimer, setEndtimer] = useState(30);\r\n    const [opacity, setOpacity] = useState(0);\r\n    const [active, setActive] = useState(false);\r\n    const [properties, setProperties] = useState(initial_properties);\r\n    const [display_final, setDisplay] = useState(initial_display_final);\r\n    const [display_provi, setDisplayProvi] = useState(initial_display_final);\r\n    const [campaigns_to_show, setCampaignsShow] = useState(initial_campaigns_to_show);\r\n    const [campaigns_saved, setCampaignsSaved] = useState(initial_campaigns_saved);\r\n    const [firstLoad , setfirstLoad] = useState(false);\r\n    const [flag, setFlag] = useState(false);\r\n\r\n\r\n    socket.connect();\r\n    useEffect(() => {\r\n      setTimeout(() => {\r\n        if (firstLoad == false) {\r\n          setProperties(initial_properties);\r\n          setDisplay(initial_display_final);\r\n          setCampaignsShow(initial_campaigns_to_show);\r\n          setCampaignsSaved(initial_campaigns_saved);\r\n          setDisplayProvi(initial_display_final);\r\n          setfirstLoad(true);\r\n        }\r\n      }, 2500);\r\n    }, [initial_properties, initial_display_final, initial_campaigns_to_show, initial_campaigns_saved, firstLoad]);\r\n\r\n    useEffect(() => {\r\n      socket.on('Triggers_changeTrigger', (data) => {\r\n        var currentSecond = parseInt(Date(Date.now()).toString().split(\" \")[4].split(\":\")[2]);\r\n        if (data.css.duration + currentSecond >= 60) {\r\n          setEndtimer(endtimer => data.css.duration + currentSecond - 60)\r\n        } else {\r\n          setEndtimer(endtimer => data.css.duration + currentSecond);\r\n        }\r\n        setOpacity(opacity => 0);\r\n        setActive(active => true);\r\n      });\r\n\r\n      socket.on('Campaigns_changeCampaign', (data) => {\r\n        var currentDate = parseInt(Date(Date.now()).toString().split(\" \")[4].split(\":\")[1]);\r\n\r\n        var month = Date(Date.now()).toString().split(\" \")[1];\r\n        var day = Date(Date.now()).toString().split(\" \")[2];\r\n        var year = Date(Date.now()).toString().split(\" \")[3];\r\n      \r\n        if (month == \"Jan\") month = 1;\r\n        if (month == \"Feb\") month = 2;\r\n        if (month == \"Mar\") month = 3;\r\n        if (month == \"Apr\") month = 4;\r\n        if (month == \"May\") month = 5;\r\n        if (month == \"Jun\") month = 6;\r\n        if (month == \"Jul\") month = 7;\r\n        if (month == \"Aug\") month = 8;\r\n        if (month == \"Sep\") month = 9;\r\n        if (month == \"Oct\") month = 10;\r\n        if (month == \"Nov\") month = 11;\r\n        if (month == \"Dec\") month = 12;\r\n        month = parseInt(month);\r\n        day = parseInt(day);\r\n        year = parseInt(year);\r\n\r\n\r\n        let data1 = data;\r\n\r\n        let new_properties = [];\r\n        let new_display_final = [];\r\n        let new_campaigns_to_show = [];\r\n        let new_campaigns_saved = [];\r\n        let new_display_times = [];\r\n        \r\n        if (properties !== undefined) {\r\n\r\n          for (var i = 0; i < data1.length; i++) {\r\n            if (data1[i].status) {\r\n              let startdate = data1[i].properties.timeframe.start_date.toString();\r\n              let enddate = data1[i].properties.timeframe.end_date.toString();\r\n\r\n              startdate = startdate.split(\"T\")[0];\r\n              enddate = enddate.split(\"T\")[0];\r\n\r\n              let startdate_month = parseInt(startdate.split(\"-\")[1]);\r\n              let startdate_day = parseInt(startdate.split(\"-\")[2]);\r\n              let startdate_year = parseInt(startdate.split(\"-\")[0]);\r\n\r\n              let enddate_month = parseInt(enddate.split(\"-\")[1]);\r\n              let enddate_day = parseInt(enddate.split(\"-\")[2]);\r\n              let enddate_year = parseInt(enddate.split(\"-\")[0]);\r\n\r\n              if (startdate_year !== 2001 && enddate_year !== 2001) {\r\n                if (startdate_year <= year && enddate_year >= year) {\r\n                  if (startdate_month <= month && enddate_month >= month) {\r\n                    if (startdate_day <= day && enddate_day >= day) {\r\n                      for (const campaign_on_streamer of data1[i].on.streamer) {\r\n                        if (campaign_on_streamer == streamerid) {\r\n                          new_properties.push(data1[i]);\r\n                        }\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n              } else {\r\n                for (const campaign_on_streamer of data1[i].on.streamer) {\r\n                  if (campaign_on_streamer == streamerid) {\r\n                    new_properties.push(data1[i]);\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n\r\n          for (var i = 0; i < new_properties.length; i++) {\r\n            for (var j = 0; j < new_properties[i].properties.frequency; j++) {\r\n              new_campaigns_saved.push(i);\r\n            }\r\n          }\r\n\r\n          let all_times = [];\r\n\r\n          for (var i = 0; i < 60; i++) {\r\n            all_times.push(i);\r\n          }\r\n\r\n          for (var i = 0; i < new_campaigns_saved.length; i++) {\r\n            let random_time = all_times[Math.floor(Math.random() * all_times.length)];\r\n            all_times.splice(all_times.indexOf(random_time), 1);\r\n            new_display_final.push(random_time);\r\n          }\r\n\r\n          new_display_final = new_display_final.sort(function(a, b){return a-b});\r\n\r\n          if (new_properties.length > properties.length) {\r\n            \r\n            let k = 0;\r\n\r\n            for (var i = 0; i < properties.length; i++) {\r\n              if (new_properties[i].campaignName !== properties[i].campaignName) {\r\n                k = i;\r\n                break;\r\n              } else {\r\n                k = new_properties.length - 1;\r\n              }\r\n            }\r\n            \r\n            let timetoend = 60 - currentDate;\r\n            let possible_time = [];\r\n\r\n            let new_frequency = Math.round(new_properties[k].properties.frequency * timetoend/ 60);\r\n\r\n            let index = [];\r\n\r\n\r\n            for (var i = 0; i < new_properties.length; i++) {    \r\n              if (i !== k) {\r\n                index[i] = getOcorrence(campaigns_saved, i) - getOcorrence(campaigns_to_show, i);\r\n              } else {\r\n                index[i] = new_properties[k].properties.frequency - new_frequency;\r\n              }\r\n            }\r\n\r\n            new_campaigns_to_show = new_campaigns_saved.slice(0);\r\n\r\n            for (var j = 0; j < index.length; j++) {\r\n              for (var i = new_campaigns_to_show.length; i >= 0; i--) {\r\n                if (index[j] > 0) {\r\n                  if (new_campaigns_to_show[i] == j) {\r\n                    new_campaigns_to_show.splice(i, 1);\r\n                    index[j] = index[j] - 1;\r\n                  }\r\n                }\r\n              }\r\n            }\r\n\r\n            for (var i = 0; i < timetoend; i++) {\r\n              possible_time.push(currentDate + i);\r\n            }\r\n\r\n            for (var i = 0; i < possible_time.length; i++) {\r\n              if (display_final.includes(possible_time[i])) {\r\n                possible_time.splice(possible_time.indexOf(possible_time[i]), 1);\r\n              }\r\n            }\r\n            \r\n            for (var i = 0; i < new_campaigns_to_show.length; i++) {\r\n              let random_time = possible_time[Math.floor(Math.random() * possible_time.length)];\r\n              possible_time.splice(possible_time.indexOf(random_time), 1);\r\n              new_display_times.push(random_time);\r\n            }\r\n            new_display_times = new_display_times.sort(function(a, b){return a-b});\r\n\r\n          } else if (new_properties.length < properties.length) {\r\n\r\n            let index = 0;\r\n\r\n            if (new_properties.length == 1) {\r\n              index = 1;\r\n            }\r\n\r\n            for (var i = 0; i < new_properties.length; i++) {\r\n              if (new_properties[i].campaignName !== properties[i].campaignName) {\r\n                index = i;\r\n                break;\r\n              }\r\n            }\r\n\r\n            new_campaigns_to_show = campaigns_to_show.slice(0);\r\n            let index_array = [];\r\n            for (var i = new_campaigns_to_show.length; i >= 0; i--) {\r\n              if (new_campaigns_to_show[i] == index) {\r\n                new_campaigns_to_show.splice(i, 1);\r\n              }\r\n            }\r\n\r\n            for (var i = 0; i < new_campaigns_to_show.length; i++) {\r\n              if (new_campaigns_to_show[i] > index) {\r\n                new_campaigns_to_show[i] = new_campaigns_to_show[i] - 1;\r\n              }\r\n            }\r\n\r\n            let timetoend = 60 - currentDate;\r\n            let possible_time = [];\r\n\r\n            for (var i = 0; i < timetoend; i++) {\r\n              possible_time.push(currentDate + i);\r\n            }\r\n            \r\n            for (var i = 0; i < new_campaigns_to_show.length; i++) {\r\n              let random_time = possible_time[Math.floor(Math.random() * possible_time.length)];\r\n              possible_time.splice(possible_time.indexOf(random_time), 1);\r\n              new_display_times.push(random_time);\r\n            }\r\n            new_display_times = new_display_times.sort(function(a, b){return a-b});\r\n          } else if (new_properties.length == properties.length) {\r\n\r\n            let index = [];\r\n\r\n            for (var i = 0; i < new_properties.length; i++) {              \r\n              index[i] = getOcorrence(campaigns_saved, i) - getOcorrence(campaigns_to_show, i);\r\n            }\r\n\r\n            new_campaigns_to_show = new_campaigns_saved.slice(0);\r\n            for (var j = 0; j < index.length; j++) {\r\n              for (var i = new_campaigns_to_show.length; i >= 0; i--) {\r\n                if (index[j] > 0) {\r\n                  if (new_campaigns_to_show[i] == j) {\r\n                    new_campaigns_to_show.splice(i, 1);\r\n                    index[j] = index[j] - 1;\r\n                  }\r\n                }\r\n              }\r\n            }\r\n\r\n            let timetoend = 60 - currentDate;\r\n            let possible_time = [];\r\n\r\n            for (var i = 0; i < timetoend; i++) {\r\n              possible_time.push(currentDate + i);\r\n            }\r\n\r\n            for (var i = 0; i < new_campaigns_to_show.length; i++) {\r\n              let random_time = possible_time[Math.floor(Math.random() * possible_time.length)];\r\n              possible_time.splice(possible_time.indexOf(random_time), 1);\r\n              new_display_times.push(random_time);\r\n            }\r\n            new_display_times = new_display_times.sort(function(a, b){return a-b});\r\n          }\r\n\r\n\r\n          // console.log(\"[\"+ new_campaigns_to_show.length + \"] new_campaigns_to_show: \" + new_campaigns_to_show);\r\n          // console.log(\"[\"+ new_display_times.length + \"] new_display_times: \" + new_display_times);\r\n          // console.log(\"[\"+ new_display_final.length + \"] new_display_final: \" + new_display_final);\r\n          // console.log(\"[\"+ new_campaigns_saved.length + \"] new_campaigns_saved: \" + new_campaigns_saved);\r\n\r\n          // console.log(\"..................................................................\")\r\n\r\n          setProperties(new_properties);\r\n          setCampaignsSaved(new_campaigns_saved);\r\n          setDisplay(new_display_times);\r\n          setDisplayProvi(new_display_final);\r\n          setCampaignsShow(new_campaigns_to_show);\r\n        }\r\n      });\r\n\r\n\r\n    }, [properties, display_final, campaigns_to_show, campaigns_saved, display_provi, streamerid]);\r\n\r\n    useEffect(() => {\r\n      const interval = setInterval(() => {\r\n        var currentSecond = parseInt(Date(Date.now()).toString().split(\" \")[4].split(\":\")[2]);\r\n        var currentDate = parseInt(Date(Date.now()).toString().split(\" \")[4].split(\":\")[1]);\r\n\r\n        if (!flag) {\r\n          if (currentSecond >= endtimer) {\r\n            setOpacity(0);\r\n            setActive(active => false);\r\n          }\r\n        } else {\r\n          if (currentSecond < 40) {\r\n            if (currentSecond >= endtimer) {\r\n              setOpacity(0);\r\n              setActive(active => false);\r\n              setFlag(flag => false);\r\n            }\r\n          }\r\n        }\r\n        if (display_final != undefined) {\r\n          if (display_final.includes(currentDate)) {\r\n            if (campaigns_to_show != undefined) {\r\n              if (currentSecond < endtimer) {\r\n                if (!active) {\r\n                  // while(true){ \r\n                  var index = campaigns_to_show[Math.floor(Math.random() * campaigns_to_show.length)];\r\n                  //   if (index != count) break;\r\n                  // }\r\n                  setCount(count => index);\r\n                  if (properties[index].css.duration !== undefined) {\r\n                    setEndtimer(endtimer => currentSecond + properties[index].css.duration);\r\n                  } else {\r\n                    setEndtimer(endtimer => 30);\r\n                  }\r\n                  campaigns_to_show.splice(campaigns_to_show.indexOf(index), 1);\r\n                  setOpacity(1);\r\n                  setActive(active => true);\r\n                }\r\n              }\r\n            }\r\n          } else {\r\n            setOpacity(0);\r\n            setActive(active => false);\r\n          }\r\n        }\r\n        if (currentDate == 59 && currentSecond >= 53) {\r\n          setCampaignsShow(campaigns_saved.slice(0));\r\n          setDisplay(display_provi.slice(0));\r\n        }\r\n      }, 5000);\r\n      return () => clearInterval(interval); \r\n    }, [display_final, campaigns_to_show, active, count, campaigns_saved, opacity,properties, flag, display_provi, endtimer, streamerid]);\r\n\r\n  if (properties != undefined) {\r\n    if (properties[count] == undefined) {\r\n      setCount(0);\r\n    } else if (opacity == 1) {\r\n      var left = properties[count].css.left;\r\n      var top = properties[count].css.top;\r\n      var filetype = properties[count].file.type;\r\n      if (properties[count].file.path == \"none\") {\r\n        var filepath = \"\";\r\n        setOpacity(0);\r\n      } else {\r\n        var filepath = properties[count].file.path;\r\n      }\r\n\r\n    } else {\r\n      var left = 0;\r\n      var top = 0;\r\n      var filepath = \"\";\r\n    }\r\n    return (\r\n      <div>\r\n        <Head>\r\n          <title>Home</title>\r\n          <link rel=\"icon\" href=\"/favicon.ico\" />\r\n        </Head>\r\n\r\n        <div>\r\n          <div>\r\n            {filetype == \"image\" ? ( <img src= {\"https://g2-layer.fra1.cdn.digitaloceanspaces.com/\" + filepath} style={{position: \"absolute\", left: left + \"px\", top: top + \"px\", opacity: opacity}}/> ) : null}\r\n            {filetype == \"video\" ? ( <video src= {\"https://g2-layer.fra1.cdn.digitaloceanspaces.com/\" + filepath} style={{position: \"absolute\", left: left + \"px\", top: top + \"px\", opacity: opacity}} autoPlay muted/> ) : null}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport async function getStaticPaths() {\r\n\r\n  \r\n      return { paths: [], fallback: true };\r\n\r\n}\r\n\r\nexport async function getStaticProps({ params }) {\r\n    const { db } = await connectToDatabase();\r\n\r\n    const data = await db.collection(\"streamers\").find({twitch_id: params.streamerid}).toArray();\r\n\r\n    const streamers = await db.collection('streamers').find({}).toArray();\r\n    const staticOverlays = await db.collection('staticoverlays').find({}).toArray();\r\n    const staticArts = await db.collection('staticarts').find({}).toArray();\r\n    const Campaigns = await db.collection('campaigns').find({}).toArray();\r\n\r\n\r\n    var month = Date(Date.now()).toString().split(\" \")[1];\r\n    var day = Date(Date.now()).toString().split(\" \")[2];\r\n    var year = Date(Date.now()).toString().split(\" \")[3];\r\n  \r\n    if (month == \"Jan\") month = 1;\r\n    if (month == \"Feb\") month = 2;\r\n    if (month == \"Mar\") month = 3;\r\n    if (month == \"Apr\") month = 4;\r\n    if (month == \"May\") month = 5;\r\n    if (month == \"Jun\") month = 6;\r\n    if (month == \"Jul\") month = 7;\r\n    if (month == \"Aug\") month = 8;\r\n    if (month == \"Sep\") month = 9;\r\n    if (month == \"Oct\") month = 10;\r\n    if (month == \"Nov\") month = 11;\r\n    if (month == \"Dec\") month = 12;\r\n    month = parseInt(month);\r\n    day = parseInt(day);\r\n    year = parseInt(year);\r\n\r\n\r\n    var file = [];\r\n    for (const Campaign of Campaigns) {\r\n      if (Campaign.status) {\r\n\r\n        let startdate = Campaign.properties.timeframe.start_date.toString();\r\n        let enddate = Campaign.properties.timeframe.end_date.toString();\r\n\r\n        let startdate_month = startdate.split(\" \")[1];\r\n        if (startdate_month == \"Jan\") startdate_month = 1;\r\n        if (startdate_month == \"Feb\") startdate_month = 2;\r\n        if (startdate_month == \"Mar\") startdate_month = 3;\r\n        if (startdate_month == \"Apr\") startdate_month = 4;\r\n        if (startdate_month == \"May\") startdate_month = 5;\r\n        if (startdate_month == \"Jun\") startdate_month = 6;\r\n        if (startdate_month == \"Jul\") startdate_month = 7;\r\n        if (startdate_month == \"Aug\") startdate_month = 8;\r\n        if (startdate_month == \"Sep\") startdate_month = 9;\r\n        if (startdate_month == \"Oct\") startdate_month = 10;\r\n        if (startdate_month == \"Nov\") startdate_month = 11;\r\n        if (startdate_month == \"Dec\") startdate_month = 12;\r\n        startdate_month = parseInt(startdate_month);\r\n        let startdate_day = parseInt(startdate.split(\" \")[2]);\r\n        let startdate_year = parseInt(startdate.split(\" \")[3]);\r\n\r\n        let enddate_month = enddate.split(\" \")[1];\r\n        if (enddate_month == \"Jan\") enddate_month = 1;\r\n        if (enddate_month == \"Feb\") enddate_month = 2;\r\n        if (enddate_month == \"Mar\") enddate_month = 3;\r\n        if (enddate_month == \"Apr\") enddate_month = 4;\r\n        if (enddate_month == \"May\") enddate_month = 5;\r\n        if (enddate_month == \"Jun\") enddate_month = 6;\r\n        if (enddate_month == \"Jul\") enddate_month = 7;\r\n        if (enddate_month == \"Aug\") enddate_month = 8;\r\n        if (enddate_month == \"Sep\") enddate_month = 9;\r\n        if (enddate_month == \"Oct\") enddate_month = 10;\r\n        if (enddate_month == \"Nov\") enddate_month = 11;\r\n        if (enddate_month == \"Dec\") enddate_month = 12;\r\n        enddate_month = parseInt(enddate_month);\r\n        let enddate_day = parseInt(enddate.split(\" \")[2]);\r\n        let enddate_year = parseInt(enddate.split(\" \")[3]);\r\n\r\n\r\n        if (startdate_year !== 2001 && enddate_year !== 2001) {\r\n          if (startdate_year <= year && enddate_year >= year) {\r\n            if (startdate_month <= month && enddate_month >= month) {\r\n              if (startdate_day <= day && enddate_day >= day) {\r\n                for (const Campaign_on_streamer of Campaign.on.streamer) {\r\n                  if (Campaign_on_streamer == params.streamerid) {\r\n                    file.push(Campaign);\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        } else {\r\n          for (const Campaign_on_streamer of Campaign.on.streamer) {\r\n            if (Campaign_on_streamer == params.streamerid) {\r\n              file.push(Campaign);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    const properties = JSON.parse(JSON.stringify(file));\r\n    const campaigns_to_show = [];\r\n    var total_displays = 0;\r\n    var k = 0;\r\n    if (properties != undefined) {\r\n      for (const property of properties) {\r\n        total_displays += property.properties.frequency;\r\n        for (var i = 0; i < property.properties.frequency; i++) {\r\n          campaigns_to_show.push(k);\r\n        }\r\n        k++;\r\n      }\r\n    }\r\n\r\n    const display_times = [];\r\n  \r\n    const possible_time = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59];\r\n  \r\n    for (var i = 0; i < total_displays; i++) {\r\n      var random_time = possible_time[Math.floor(Math.random() * possible_time.length)];\r\n      possible_time.splice(possible_time.indexOf(random_time), 1);\r\n      display_times.push(random_time);\r\n    }\r\n    \r\n    var display_times_sorted = display_times.sort(function(a, b){return a-b});\r\n\r\n    const display_final = JSON.parse(JSON.stringify(display_times_sorted));\r\n\r\n    const campaigns_saved = JSON.parse(JSON.stringify(campaigns_to_show));    \r\n\r\n    return {\r\n        props: {initial_properties: properties, initial_display_final: display_final, initial_campaigns_to_show: campaigns_to_show, initial_campaigns_saved: campaigns_saved, streamerid: params.streamerid },\r\n        revalidate: 1\r\n    };\r\n}\r\n\r\nfunction getOcorrence(array, value) {\r\n    return array.filter((v) => (v === value)).length;\r\n}","C:\\Users\\win10\\Github\\G2Layer_Gen\\pages\\[streamerid]\\triggers.js",["42","43"],[],"import Head from 'next/head'\r\nimport { connectToDatabase } from '../../util/mongodb'\r\nimport styled from 'styled-components'\r\nimport { useState, useEffect } from 'react'\r\nimport socketIOClient from 'socket.io-client';\r\n\r\nconst socket = socketIOClient('http://localhost:3002');\r\n\r\nexport default function Home({}) {\r\n\r\n\r\n  const [endtimer, setEndtimer] = useState(30);\r\n  const [opacity, setOpacity] = useState(0);\r\n  const [active, setActive] = useState(false);\r\n  const [properties, setProperties] = useState(undefined);\r\n  const [flag, setFlag] = useState(false);\r\n\r\n  socket.connect();\r\n\r\n  useEffect(() => {\r\n    socket.on('Triggers_changeTrigger', (data) => {\r\n      var currentSecond = parseInt(Date(Date.now()).toString().split(\" \")[4].split(\":\")[2]);\r\n      if (data.css.duration + currentSecond >= 60) {\r\n        setEndtimer(endtimer => data.css.duration + currentSecond - 60);\r\n        setFlag(flag => true);\r\n      } else {\r\n        setEndtimer(endtimer => data.css.duration + currentSecond);\r\n      }\r\n      setProperties(properties => data);\r\n      setOpacity(opacity => 1);\r\n      setActive(active => true);\r\n    });\r\n  }, [properties, opacity, active, endtimer]);\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      var currentSecond = parseInt(Date(Date.now()).toString().split(\" \")[4].split(\":\")[2]);\r\n\r\n      if (!flag) {\r\n        if (currentSecond >= endtimer) {\r\n          setOpacity(0);\r\n          setActive(active => false);\r\n        }\r\n      } else {\r\n        if (currentSecond < 40) {\r\n          if (currentSecond >= endtimer) {\r\n            setOpacity(0);\r\n            setActive(active => false);\r\n            setFlag(flag => false);\r\n          }\r\n        }\r\n      }\r\n    }, 5000);\r\n    return () => clearInterval(interval); \r\n  }, [properties, opacity, active, endtimer, flag]);\r\n\r\n  if (properties != undefined) {\r\n    if (properties == undefined) {\r\n      setCount(0);\r\n    } else if (opacity == 1) {\r\n      var left = properties.css.left;\r\n      var top = properties.css.top;\r\n      var filetype = properties.file.type;\r\n      if (properties.file.path == \"none\") {\r\n        var filepath = \"\";\r\n        setOpacity(0);\r\n      } else {\r\n        var filepath = properties.file.path;\r\n      }\r\n\r\n    } else {\r\n      var left = 0;\r\n      var top = 0;\r\n      var filepath = \"\";\r\n    }\r\n    return (\r\n      <div>\r\n        <Head>\r\n          <title>Home</title>\r\n          <link rel=\"icon\" href=\"/favicon.ico\" />\r\n        </Head>\r\n\r\n        <div>\r\n          <div>\r\n            {filetype == \"image\" ? ( <img src= {\"https://g2-layer.fra1.cdn.digitaloceanspaces.com/\" + filepath} style={{position: \"absolute\", left: left + \"px\", top: top + \"px\", opacity: opacity}}/> ) : null}\r\n            {filetype == \"video\" ? ( <video src= {\"https://g2-layer.fra1.cdn.digitaloceanspaces.com/\" + filepath} style={{position: \"absolute\", left: left + \"px\", top: top + \"px\", opacity: opacity}} autoPlay muted/> ) : null}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport async function getStaticPaths() {\r\n\r\n  \r\n      return { paths: [], fallback: true };\r\n\r\n}\r\n\r\nexport async function getStaticProps({ params }) {\r\n    const { db } = await connectToDatabase();\r\n\r\n    return {\r\n        props: { },\r\n        revalidate: 1\r\n    };\r\n}\r\n\r\nfunction getOcorrence(array, value) {\r\n    return array.filter((v) => (v === value)).length;\r\n}","C:\\Users\\win10\\Github\\G2Layer_Gen\\pages\\[streamerid]\\[overlayid].js",["44","45","46","47","48"],[],"import Head from 'next/head'\r\nimport { connectToDatabase } from '../../util/mongodb'\r\nimport styled from 'styled-components'\r\nimport Image from 'next/image'\r\nimport { useState, useEffect } from 'react'\r\nimport socketIOClient from 'socket.io-client';\r\n\r\nconst socket = socketIOClient('http://localhost:3002');\r\n\r\nexport default function Home({arts_props, sponsor_props, group_props, overlay_props, streamerId, overlayId}) {\r\n  const [count, setCount] = useState(0);\r\n  const [staticOverlays, setStaticOverlays] = useState(overlay_props);\r\n  const [staticArts, setStaticArts] = useState(arts_props);\r\n  const [sponsors, setSponsors] = useState(sponsor_props);\r\n  const [groups, setGroups] = useState(group_props);\r\n  const [firstLoad , setfirstLoad] = useState(false);\r\n\r\n  socket.connect();\r\n  useEffect(() => {\r\n    setTimeout(() => {\r\n      if (firstLoad == false) {\r\n        setStaticOverlays(overlay_props);\r\n        setSponsors(sponsor_props);\r\n        setStaticArts(arts_props);\r\n        setGroups(group_props);\r\n        setfirstLoad(true);\r\n      }\r\n    }, 2500);\r\n  }, [overlay_props, staticOverlays, firstLoad, sponsor_props, sponsors, staticArts, arts_props, groups, group_props]);\r\n\r\n\r\n  useEffect(() => {\r\n      socket.on('Overlays_changeOverlay', (data) => {\r\n        let data1 = data.result;\r\n        let data2 = data.result2;\r\n\r\n        let new_staticArts_array = [];\r\n        if (data1 != undefined) {\r\n          for (var i = 0; i < data1.length; i++) {\r\n            if(data1[i].status) {\r\n              if (data1[i].on.streamer.includes(streamerId)) {\r\n                if (data1[i].OverlayName == overlayId) {\r\n                  setStaticOverlays(data1[i]);\r\n                  for (var j = 0; j < data2.length; j++) {\r\n                    for (var z = 0; z < data1[i].on.art.length; z++) {\r\n                      if (data2[j].ArtName == data1[i].on.art[z]) {\r\n                        if (data2[j].status) {\r\n                          new_staticArts_array.push(data2[j]);\r\n                        }\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n          setStaticArts(new_staticArts_array);\r\n        }\r\n      });\r\n\r\n      socket.on('Overlays_changeStreamer', (data) => {\r\n        let data1 = data.result;\r\n        let data2 = data.result2;\r\n        let data3 = data.result3;\r\n\r\n        let new_sponsors_array = [];\r\n        for (var i = 0; i < data1.length; i++) {\r\n          if(data1[i].status) {\r\n            if (data1[i].twitch_id == streamerId) {\r\n              for (var j = 0; j < data2.length; j++) {\r\n                if (data2[j].name == data1[i].group) {\r\n                  if (data2[j].status) {\r\n                    setGroups(data2[j]);\r\n                    for (var z = 0; z < data2[j].sponsors.length; z++) {\r\n                      for (var x = 0; x < data3.length; x++) {\r\n                        if (data2[j].sponsors[z] == data3[x].name) {\r\n                          if (data3[x].status) {\r\n                            new_sponsors_array.push(data3[x]);\r\n                          }\r\n                        }\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n        setSponsors(new_sponsors_array);\r\n      });\r\n\r\n      socket.on('Overlays_changeSponsor', (data) => {\r\n        let data1 = data.result;\r\n        let data2 = data.result2;\r\n        let data3 = data.result3;\r\n\r\n        let new_sponsors_array = [];\r\n        for (var i = 0; i < data1.length; i++) {\r\n          if(data1[i].status) {\r\n            if (data1[i].twitch_id == streamerId) {\r\n              for (var j = 0; j < data2.length; j++) {\r\n                if (data2[j].name == data1[i].group) {\r\n                  if (data2[j].status) {\r\n                    setGroups(data2[j]);\r\n                    for (var z = 0; z < data2[j].sponsors.length; z++) {\r\n                      for (var x = 0; x < data3.length; x++) {\r\n                        if (data2[j].sponsors[z] == data3[x].name) {\r\n                          if (data3[x].status) {\r\n                            new_sponsors_array.push(data3[x]);\r\n                          }\r\n                        }\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n        setSponsors(new_sponsors_array);\r\n      });\r\n\r\n      socket.on('Overlays_changeGroup', (data) => {\r\n        let data1 = data.result;\r\n        let data2 = data.result2;\r\n        let data3 = data.result3;\r\n\r\n        let new_sponsors_array = [];\r\n        if (data1 !== undefined) {\r\n          for (var i = 0; i < data1.length; i++) {\r\n            if(data1[i].status) {\r\n              if (data1[i].twitch_id == streamerId) {\r\n                for (var j = 0; j < data2.length; j++) {\r\n                  if (data2[j].name == data1[i].group) {\r\n                    if (data2[j].status) {\r\n                      setGroups(data2[j]);\r\n                      for (var z = 0; z < data2[j].sponsors.length; z++) {\r\n                        for (var x = 0; x < data3.length; x++) {\r\n                          if (data2[j].sponsors[z] == data3[x].name) {\r\n                            if (data3[x].status) {\r\n                              new_sponsors_array.push(data3[x]);\r\n                            }\r\n                          }\r\n                        }\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n          setSponsors(new_sponsors_array);\r\n        } \r\n      });\r\n\r\n      socket.on('Overlays_changeStaticArt', (data) => {\r\n        let data1 = data.result;\r\n        let data2 = data.result2;\r\n\r\n        let new_staticArts_array = [];\r\n        for (var i = 0; i < data1.length; i++) {\r\n          if (data1[i].OverlayName == overlayId) {\r\n            for (var z = 0; z < data1[i].on.art.length; z++) {\r\n              for (var j = 0; j < data2.length; j++) {\r\n                if (data2[j].ArtName == data1[i].on.art[z]) {\r\n                  if (data2[j].status) {\r\n                    new_staticArts_array.push(data2[j]);\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n        setStaticArts(new_staticArts_array);\r\n      });\r\n\r\n  }, [overlayId, streamerId, staticOverlays, staticArts, sponsors, groups]);\r\n\r\n  let new_staticArts = [];\r\n\r\n  if (staticArts != undefined) {\r\n      new_staticArts = [...staticArts].sort((a, b) => parseFloat(b.css.zindex) - parseFloat(a.css.zindex));\r\n  }\r\n  var width = 0;\r\n  var height = 0;\r\n  var left = 0;\r\n  var top = 0;\r\n  var sponsor_sizes = 0;\r\n  var start_left = 0;\r\n\r\n  var new_sponsor_props = [];\r\n  var slide_sponsor_props = [];\r\n\r\n  if (sponsors != undefined) {\r\n    let new_sponsors = [...sponsors].sort((a, b) => parseFloat(a.order) - parseFloat(b.order));\r\n    if (staticOverlays != undefined) {\r\n      width = staticOverlays.sponsor_container.size.width;\r\n      height = staticOverlays.sponsor_container.size.height;\r\n      left = staticOverlays.sponsor_container.position.left;\r\n      top = staticOverlays.sponsor_container.position.top;\r\n      \r\n      if(staticOverlays.sponsor_container.slideshow.status == false) {\r\n        sponsor_sizes = (staticOverlays.sponsor_container.size.width / new_sponsors.length) - 10;\r\n        sponsor_sizes = sponsor_sizes.toString();\r\n        for (var i = 0; i < new_sponsors.length; i++) {\r\n          if (i == 0) {\r\n            start_left = 0;\r\n          } else {\r\n            start_left = start_left + parseInt(sponsor_sizes);\r\n          }\r\n          if (staticOverlays.sponsor_container.color) {\r\n            for (var j = 10000; j>0; j--) {\r\n              var value = j / 10000;\r\n              if (new_sponsors[i].file.white.size.width * value < parseInt(sponsor_sizes)) {\r\n                if (new_sponsors[i].file.white.size.height * value <= height) {\r\n                  var file_path = new_sponsors[i].file.white.path;\r\n                  var file_size_width = value * new_sponsors[i].file.white.size.width;\r\n                  var file_size_height = value * new_sponsors[i].file.white.size.height;\r\n                  break;\r\n                }\r\n              }\r\n            }\r\n          } else {\r\n            for (var j = 10000; j>0; j--) {\r\n              var value = j / 10000;\r\n              if (new_sponsors[i].file.black.size.width * value < parseInt(sponsor_sizes)) {\r\n                if (new_sponsors[i].file.black.size.height * value <= height) {\r\n                  var file_path = new_sponsors[i].file.black.path;\r\n                  var file_size_width = value * new_sponsors[i].file.black.size.width;\r\n                  var file_size_height = value * new_sponsors[i].file.black.size.height;\r\n                  break;\r\n                }\r\n              }\r\n            }\r\n          }\r\n            var new_set = {\r\n            file: {\r\n              path: file_path,\r\n              size: {\r\n                width: file_size_width,\r\n                height: file_size_height,\r\n                top: (height - file_size_height) / 2,\r\n              }\r\n            },\r\n            order: new_sponsors[i].order,\r\n            css: {\r\n              left: start_left,\r\n              top: top,\r\n              zindex: 500\r\n            }\r\n          }\r\n          new_sponsor_props.push(new_set);\r\n        }\r\n        var total_width = 0;\r\n        for (var i = 0; i < new_sponsor_props.length; i++) {\r\n          total_width += new_sponsor_props[i].file.size.width;\r\n        }\r\n        var setWidth = (((width) - total_width) / 2 ) - (10 * (new_sponsor_props.length -1))/2;\r\n        for (var i = 0; i < new_sponsor_props.length; i++) {\r\n          new_sponsor_props[i].css.left = setWidth;\r\n          setWidth += new_sponsor_props[i].file.size.width + 10;\r\n        }\r\n\r\n      } else {\r\n        sponsor_sizes = staticOverlays.sponsor_container.size.width - 20;\r\n        sponsor_sizes = sponsor_sizes.toString();\r\n        for (var i = 0; i < new_sponsors.length; i++) {\r\n          if (i == 0) {\r\n            start_left = 0;\r\n          } else {\r\n            start_left = start_left + parseInt(sponsor_sizes);\r\n          }\r\n          if (staticOverlays.sponsor_container.color) {\r\n            for (var j = 10000; j>0; j--) {\r\n              var value = j / 10000;\r\n              if (new_sponsors[i].file.white.size.width * value < parseInt(sponsor_sizes)) {\r\n                if (new_sponsors[i].file.white.size.height * value <= height) {\r\n                  var file_path = new_sponsors[i].file.white.path;\r\n                  var file_size_width = value * new_sponsors[i].file.white.size.width;\r\n                  var file_size_height = value * new_sponsors[i].file.white.size.height;\r\n                  break;\r\n                }\r\n              }\r\n            }\r\n          } else {\r\n            for (var j = 10000; j>0; j--) {\r\n              var value = j / 10000;\r\n              if (new_sponsors[i].file.black.size.width * value < parseInt(sponsor_sizes)) {\r\n                if (new_sponsors[i].file.black.size.height * value <= height) {\r\n                  var file_path = new_sponsors[i].file.black.path;\r\n                  var file_size_width = value * new_sponsors[i].file.black.size.width;\r\n                  var file_size_height = value * new_sponsors[i].file.black.size.height;\r\n                  break;\r\n                }\r\n              }\r\n            }\r\n          }\r\n            var new_set = {\r\n            file: {\r\n              path: file_path,\r\n              size: {\r\n                width: file_size_width,\r\n                height: file_size_height,\r\n                top: (height - file_size_height) / 2,\r\n              }\r\n            },\r\n            order: new_sponsors[i].order,\r\n            css: {\r\n              left: start_left,\r\n              top: top,\r\n              zindex: 500\r\n            }\r\n          }\r\n          slide_sponsor_props.push(new_set);\r\n        }\r\n        var total_width = 0;\r\n\r\n\r\n        var setWidth = width;\r\n\r\n        // new_sponsor_props = [];\r\n        // new_sponsor_props.push(slide_sponsor_props[count]);\r\n        // new_sponsor_props[0].css.left = (width - new_sponsor_props[0].file.size.width) / 2;\r\n      }\r\n    } \r\n  }\r\n\r\n  useEffect(() => {\r\n    if (staticOverlays != undefined) {\r\n      if(staticOverlays.sponsor_container.slideshow.status == true) {\r\n        const interval = setInterval(() => {\r\n          setCount(count => count + 1);\r\n          if (count >= slide_sponsor_props.length -1 ) {\r\n            setCount(0);\r\n          }\r\n        }, 10000);\r\n        return () => clearInterval(interval);\r\n      }\r\n    }\r\n  }, [count, staticOverlays]);\r\n\r\n  if (new_staticArts != undefined) {\r\n    return (\r\n      <div>\r\n        <Head>\r\n          <title>Home</title>\r\n          <link rel=\"icon\" href=\"/favicon.ico\" />\r\n        </Head>\r\n\r\n        <div>\r\n          <div style={{position: \"absolute\", left: left + \"px\", top: top + \"px\", width: width + \"px\", height: height + \"px\", background: \"#FFA07A\", zIndex: \"450\"}} key = \"3\">\r\n          {new_sponsor_props.map((new_sponsor_prop) => ( \r\n              <div style={{position: \"absolute\", left: new_sponsor_prop.css.left + \"px\", top: \"0px\", width: new_sponsor_prop.file.size.width + \"px\", height: height + \"px\"}} key=\"1\">\r\n                {new_sponsor_prop.file.path != undefined ? ( <img src= {\"https://g2-layer.fra1.cdn.digitaloceanspaces.com/\" + new_sponsor_prop.file.path} style={{ alignSelf: \"center\", position: \"absolute\", left: \"0px\", top: new_sponsor_prop.file.size.top + \"px\", width: new_sponsor_prop.file.size.width + \"px\", height: new_sponsor_prop.file.size.height + \"px\", zIndex:\"500\"} } /> ) : null }\r\n              </div>\r\n          ))}\r\n          </div>\r\n          {new_staticArts.map((property) => (\r\n            <div key = \"4\">\r\n              {property.file.type == \"image\" ? ( <img src = {\"https://g2-layer.fra1.cdn.digitaloceanspaces.com/\" + property.file.path} style={{position: \"absolute\", left: property.css.left + \"px\", top: property.css.top + \"px\", zIndex: property.css.zindex}}/> ) : null }\r\n              {property.file.type == \"video\" ? ( <video src = {\"https://g2-layer.fra1.cdn.digitaloceanspaces.com/\" + property.file.path} style={{position: \"absolute\", left: property.css.left + \"px\", top: property.css.top + \"px\", zIndex: property.css.zindex }} autoPlay muted loop/> ) : null}\r\n            </div>\r\n          ))}\r\n          \r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport async function getStaticPaths() {\r\n\r\n      return { paths: [], fallback: true };\r\n}\r\n\r\nexport async function getStaticProps({ params }) {\r\n    const { db } = await connectToDatabase();\r\n\r\n    const data = await db.collection(\"streamers\").find({twitch_id: params.streamerid}).toArray();\r\n\r\n    const streamers = await db.collection('streamers').find({}).toArray();\r\n    const staticOverlays = await db.collection('staticoverlays').find({}).toArray();\r\n    const staticArts = await db.collection('staticarts').find({}).toArray();\r\n    const groups = await db.collection('groups').find({}).toArray();\r\n    const sponsors = await db.collection('sponsors').find({}).toArray();\r\n\r\n    var file = [];\r\n    var sponsor_array = [];\r\n    var group_array = [];\r\n  \r\n    for (const streamer of streamers) {\r\n      if (streamer.status) {\r\n        if (streamer.twitch_id == params.streamerid) {\r\n          for (const group of groups) {\r\n            if (streamer.group == group.name) {\r\n              if (group.status) {\r\n                group_array.push(group);           \r\n                for (const sponsor of sponsors) {\r\n                  for (const group_sponsor of group.sponsors) {\r\n                    if (sponsor.name == group_sponsor) {\r\n                      if (sponsor.status) {\r\n                        sponsor_array.push(sponsor);\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    for (const staticOverlay of staticOverlays) {\r\n      if (staticOverlay.status) {\r\n        for (const staticOverlay_on_streamer of staticOverlay.on.streamer) {\r\n          if (staticOverlay_on_streamer == params.streamerid) {\r\n              if (staticOverlay.OverlayName == params.overlayid) {\r\n                for (const staticArt of staticArts) {\r\n                  for (const staticOverlay_art of staticOverlay.on.art) {\r\n                    if (staticArt.ArtName == staticOverlay_art) {\r\n                      if (staticArt.status) {\r\n                        file.push(staticArt);\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    var overlay_array = [];\r\n    for (const staticOverlay of staticOverlays) {\r\n      if (staticOverlay.OverlayName == params.overlayid) {\r\n        overlay_array = staticOverlay;\r\n      }\r\n    }\r\n\r\n\r\n    const overlayId = params.overlayid;\r\n    const streamerId = params.streamerid;\r\n\r\n    const overlay_props = JSON.parse(JSON.stringify(overlay_array));\r\n    const sponsor_props = JSON.parse(JSON.stringify(sponsor_array));\r\n    const arts_props = JSON.parse(JSON.stringify(file));\r\n    const group_props = JSON.parse(JSON.stringify(group_array));\r\n\r\n    return {\r\n        props: {arts_props: arts_props, group_props: group_props, sponsor_props: sponsor_props, overlay_props: overlay_props, overlayId: overlayId, streamerId: streamerId },\r\n        revalidate: 1\r\n    };\r\n\r\n}\r\n\r\n\r\n","C:\\Users\\win10\\Github\\G2Layer_Gen\\pages\\_app.js",[],[],{"ruleId":"49","severity":1,"message":"50","line":378,"column":38,"nodeType":"51","endLine":378,"endColumn":199},{"ruleId":"52","severity":1,"message":"53","line":378,"column":38,"nodeType":"51","endLine":378,"endColumn":199},{"ruleId":"49","severity":1,"message":"50","line":85,"column":38,"nodeType":"51","endLine":85,"endColumn":199},{"ruleId":"52","severity":1,"message":"53","line":85,"column":38,"nodeType":"51","endLine":85,"endColumn":199},{"ruleId":"54","severity":1,"message":"55","line":340,"column":6,"nodeType":"56","endLine":340,"endColumn":29,"suggestions":"57"},{"ruleId":"49","severity":1,"message":"50","line":354,"column":62,"nodeType":"51","endLine":354,"endColumn":380},{"ruleId":"52","severity":1,"message":"53","line":354,"column":62,"nodeType":"51","endLine":354,"endColumn":380},{"ruleId":"49","severity":1,"message":"50","line":360,"column":50,"nodeType":"51","endLine":360,"endColumn":259},{"ruleId":"52","severity":1,"message":"53","line":360,"column":50,"nodeType":"51","endLine":360,"endColumn":259},"@next/next/no-img-element","Do not use `<img>` element. Use `<Image />` from `next/image` instead. See: https://nextjs.org/docs/messages/no-img-element","JSXOpeningElement","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'slide_sponsor_props.length'. Either include it or remove the dependency array.","ArrayExpression",["58"],{"desc":"59","fix":"60"},"Update the dependencies array to be: [count, slide_sponsor_props.length, staticOverlays]",{"range":"61","text":"62"},[12662,12685],"[count, slide_sponsor_props.length, staticOverlays]"]